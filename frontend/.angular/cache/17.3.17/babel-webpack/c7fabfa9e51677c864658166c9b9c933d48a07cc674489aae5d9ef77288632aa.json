{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TreasuryService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8085/api/treasury';\n    this.wsUrl = 'http://localhost:8085/ws';\n    this.stompClient = null;\n    this.marketDataSubject = new Subject();\n    this.marketData$ = this.marketDataSubject.asObservable();\n    this.initializeWebSocket();\n  }\n  getAllBonds() {\n    return this.http.get(`${this.apiUrl}/bonds`);\n  }\n  getBondByCusip(cusip) {\n    return this.http.get(`${this.apiUrl}/bonds/${cusip}`);\n  }\n  initializeData() {\n    return this.http.post(`${this.apiUrl}/initialize`, {});\n  }\n  initializeWebSocket() {\n    this.stompClient = new Client({\n      webSocketFactory: () => new SockJS(this.wsUrl),\n      debug: str => {\n        console.log('STOMP: ' + str);\n      },\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000,\n      onConnect: frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient?.subscribe('/topic/market-data', message => {\n          const bonds = JSON.parse(message.body);\n          this.marketDataSubject.next(bonds);\n        });\n      },\n      onStompError: error => {\n        console.error('WebSocket connection error:', error);\n        setTimeout(() => this.initializeWebSocket(), 5000);\n      }\n    });\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  static {\n    this.ɵfac = function TreasuryService_Factory(t) {\n      return new (t || TreasuryService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreasuryService,\n      factory: TreasuryService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","SockJS","Client","TreasuryService","constructor","http","apiUrl","wsUrl","stompClient","marketDataSubject","marketData$","asObservable","initializeWebSocket","getAllBonds","get","getBondByCusip","cusip","initializeData","post","webSocketFactory","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","message","bonds","JSON","parse","body","next","onStompError","error","setTimeout","activate","disconnect","deactivate","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\MAAK-TreasuryDashboard\\frontend\\src\\app\\services\\treasury.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { TreasuryBond } from '../models/treasury-bond.model';\r\nimport * as SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreasuryService {\r\n  private apiUrl = 'http://localhost:8085/api/treasury';\r\n  private wsUrl = 'http://localhost:8085/ws';\r\n  private stompClient: Client | null = null;\r\n  private marketDataSubject = new Subject<TreasuryBond[]>();\r\n  \r\n  public marketData$ = this.marketDataSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.initializeWebSocket();\r\n  }\r\n\r\n  getAllBonds(): Observable<TreasuryBond[]> {\r\n    return this.http.get<TreasuryBond[]>(`${this.apiUrl}/bonds`);\r\n  }\r\n\r\n  getBondByCusip(cusip: string): Observable<TreasuryBond> {\r\n    return this.http.get<TreasuryBond>(`${this.apiUrl}/bonds/${cusip}`);\r\n  }\r\n\r\n  initializeData(): Observable<string> {\r\n    return this.http.post<string>(`${this.apiUrl}/initialize`, {});\r\n  }\r\n\r\n  private initializeWebSocket(): void {\r\n    this.stompClient = new Client({\r\n      webSocketFactory: () => new SockJS(this.wsUrl),\r\n      debug: (str: string) => {\r\n        console.log('STOMP: ' + str);\r\n      },\r\n      reconnectDelay: 5000,\r\n      heartbeatIncoming: 4000,\r\n      heartbeatOutgoing: 4000,\r\n      onConnect: (frame: any) => {\r\n        console.log('Connected: ' + frame);\r\n        \r\n        this.stompClient?.subscribe('/topic/market-data', (message: any) => {\r\n          const bonds: TreasuryBond[] = JSON.parse(message.body);\r\n          this.marketDataSubject.next(bonds);\r\n        });\r\n      },\r\n      onStompError: (error: any) => {\r\n        console.error('WebSocket connection error:', error);\r\n        setTimeout(() => this.initializeWebSocket(), 5000);\r\n      }\r\n    });\r\n\r\n    this.stompClient.activate();\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.stompClient) {\r\n      this.stompClient.deactivate();\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,OAAO,QAAQ,MAAM;AAE1C,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAASC,MAAM,QAAQ,gBAAgB;;;AAKvC,OAAM,MAAOC,eAAe;EAQ1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,MAAM,GAAG,oCAAoC;IAC7C,KAAAC,KAAK,GAAG,0BAA0B;IAClC,KAAAC,WAAW,GAAkB,IAAI;IACjC,KAAAC,iBAAiB,GAAG,IAAIT,OAAO,EAAkB;IAElD,KAAAU,WAAW,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;IAGxD,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAiB,GAAG,IAAI,CAACR,MAAM,QAAQ,CAAC;EAC9D;EAEAS,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAe,GAAG,IAAI,CAACR,MAAM,UAAUU,KAAK,EAAE,CAAC;EACrE;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAS,GAAG,IAAI,CAACZ,MAAM,aAAa,EAAE,EAAE,CAAC;EAChE;EAEQM,mBAAmBA,CAAA;IACzB,IAAI,CAACJ,WAAW,GAAG,IAAIN,MAAM,CAAC;MAC5BiB,gBAAgB,EAAEA,CAAA,KAAM,IAAIlB,MAAM,CAAC,IAAI,CAACM,KAAK,CAAC;MAC9Ca,KAAK,EAAGC,GAAW,IAAI;QACrBC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGF,GAAG,CAAC;MAC9B,CAAC;MACDG,cAAc,EAAE,IAAI;MACpBC,iBAAiB,EAAE,IAAI;MACvBC,iBAAiB,EAAE,IAAI;MACvBC,SAAS,EAAGC,KAAU,IAAI;QACxBN,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGK,KAAK,CAAC;QAElC,IAAI,CAACpB,WAAW,EAAEqB,SAAS,CAAC,oBAAoB,EAAGC,OAAY,IAAI;UACjE,MAAMC,KAAK,GAAmBC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;UACtD,IAAI,CAACzB,iBAAiB,CAAC0B,IAAI,CAACJ,KAAK,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC;MACDK,YAAY,EAAGC,KAAU,IAAI;QAC3Bf,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDC,UAAU,CAAC,MAAM,IAAI,CAAC1B,mBAAmB,EAAE,EAAE,IAAI,CAAC;MACpD;KACD,CAAC;IAEF,IAAI,CAACJ,WAAW,CAAC+B,QAAQ,EAAE;EAC7B;EAEAC,UAAUA,CAAA;IACR,IAAI,IAAI,CAAChC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACiC,UAAU,EAAE;;EAEjC;;;uBAtDWtC,eAAe,EAAAuC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf1C,eAAe;MAAA2C,OAAA,EAAf3C,eAAe,CAAA4C,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}